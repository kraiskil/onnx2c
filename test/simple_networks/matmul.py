import numpy as np
import onnx
from onnx.helper import make_model, make_node, make_graph, make_tensor_value_info
from onnx.checker import check_model

np.random.seed(0)

shapes = [
    ([2, 3], [3, 4]),
    # Elementwise broadcasting
    ([5, 2, 3], [5, 3, 4]),
    ([4, 5, 2, 3], [4, 5, 3, 4]),
    # Uneven Broadcasting 
    ([2, 3, 4], [4, 5]),
    ([3, 4], [2, 4, 5]),
    # Vectors
    ([3], [3]),
    ([3, 4], [4]),
    ([2, 3, 4], [4]),
    ([2, 3, 4, 5], [5]),
    ([3], [3, 4])
]

main_template = """
#include <stdio.h>
#include <math.h>

extern void entry(const float A${sizes_a}, const float B${sizes_b}, float Y${sizes_y});

int main() {
    entry(a, b, y);
    
    float* y_flat = (float*)y;
    float* expected_flat = (float*)expected;
    for (int i = 0; i < ${element_count_y}; i++) {
        if (fabs(y_flat[i] - expected_flat[i]) > 1e-5 || true) {
            printf("mismatch at %d: got %f, expected %f\\n", i, y_flat[i], expected_flat[i]);
            return 1;
        }
    }

    return 0;
}
"""

def format_shape(value):
    return "".join(f"[{dim}]" for dim in value.shape)

def define_array(name, value):
    init_list = np.array2string(value, separator=", ", max_line_width=80) \
        .replace("[", "{") \
        .replace("]", "}")
    return "float " + name + format_shape(value) + " = " + init_list + ";\n"


for (a, b) in shapes:
    name = f"matmul_{'x'.join(map(str, a))}_{'x'.join(map(str, b))}"

    a_array = np.random.rand(*a).astype(np.float32)
    b_array = np.random.rand(*b).astype(np.float32)
    y_array = np.matmul(a_array, b_array)

    A = make_tensor_value_info("A", onnx.TensorProto.FLOAT, a)
    B = make_tensor_value_info("B", onnx.TensorProto.FLOAT, b)
    Y = make_tensor_value_info("Y", onnx.TensorProto.FLOAT, [None] * len(y_array.shape))

    node = make_node("MatMul", ["A", "B"], ["Y"])

    graph = make_graph([node], name, [A, B], [Y])
    model = make_model(graph, producer_name="matmul.py")

    check_model(model)

    onnx.save(model, f"{name}.onnx")

    with open(f"{name}.c", "w") as f:
        f.write("// Generated by test/simple_networks/matmul.py\n")
        f.write("// Do not edit manually.\n\n")

        f.write(define_array("a", a_array))
        f.write(define_array("b", b_array))
        f.write(f"float y{format_shape(y_array)};\n")
        f.write(define_array("expected", y_array))

        main = main_template \
            .replace("${sizes_a}", format_shape(a_array)) \
            .replace("${sizes_b}", format_shape(b_array)) \
            .replace("${sizes_y}", format_shape(y_array)) \
            .replace("${element_count_y}", str(y_array.size))

        f.write(main)
    
    print(f"simple_test_matmul( {name} )")
